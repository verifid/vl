# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from vl.models.base_model_ import Model
from vl import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        surname: str = None,
        date_of_birth: str = None,
        country: str = None,
    ):  # noqa: E501
        """User - a model defined in Swagger

        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param surname: The surname of this User.  # noqa: E501
        :type surname: str
        :param date_of_birth: The date_of_birth of this User.  # noqa: E501
        :type date_of_birth: str
        :param country: The country of this User.  # noqa: E501
        :type country: str
        """
        self.swagger_types = {
            "name": str,
            "surname": str,
            "date_of_birth": str,
            "country": str,
        }

        self.attribute_map = {
            "name": "name",
            "surname": "surname",
            "date_of_birth": "dateOfBirth",
            "country": "country",
        }
        self._name = name
        self._surname = surname
        self._date_of_birth = date_of_birth
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> "User":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def surname(self) -> str:
        """Gets the surname of this User.


        :return: The surname of this User.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname: str):
        """Sets the surname of this User.


        :param surname: The surname of this User.
        :type surname: str
        """
        if surname is None:
            raise ValueError(
                "Invalid value for `surname`, must not be `None`"
            )  # noqa: E501

        self._surname = surname

    @property
    def date_of_birth(self) -> str:
        """Gets the date_of_birth of this User.


        :return: The date_of_birth of this User.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth: str):
        """Sets the date_of_birth of this User.


        :param date_of_birth: The date_of_birth of this User.
        :type date_of_birth: str
        """
        if date_of_birth is None:
            raise ValueError(
                "Invalid value for `date_of_birth`, must not be `None`"
            )  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def country(self) -> str:
        """Gets the country of this User.


        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this User.


        :param country: The country of this User.
        :type country: str
        """
        if country is None:
            raise ValueError(
                "Invalid value for `country`, must not be `None`"
            )  # noqa: E501

        self._country = country
